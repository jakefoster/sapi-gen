<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="org.ncore.Common" #>
<#
ServicedApiModel model = ( (org.ncore.ServicedApi.CodeGenerator.T4Templating.TemplatingHost)Host ).Model;
string factypeName = Host.ResolveParameterValue( null, null, "TargetObjectName" );
FactypeModel factype = model.Factypes[ factypeName ];

string baseType = "Factype";
if( factype.IsKeyed )
{
	baseType = String.Format( "KeyedFactype<{0}>", factype.KeyProperty.Type );
}

string constructorParams = string.Empty;
if( factype.Attributes.Count > 0 )
{
	StringBuilder builder = new StringBuilder();
	builder.Append( " " );

	int current = 1;
	foreach( FactypeAttributeModel property in factype.Attributes.Values )
	{
		builder.Append( property.Type );
		builder.Append( " " );
		builder.Append( property.Name.ToInternalName() );
		if( current < factype.Attributes.Count )
		{
			builder.Append( ", " );
		}
		current++;
	}
	
	builder.Append( " " );

	constructorParams = builder.ToString();
}

string baseConstructorParams = string.Empty;
if( factype.IsKeyed )
{
	baseConstructorParams = " " + factype.KeyProperty.Name.ToInternalName() + " ";
}
#>
<#@ include file="Header.generated.cs.t4" #>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Transactions;
using org.ncore.Common;
using org.ncore.Extensions;
using org.ncore.ServicedApi;
using org.ncore.ServicedApi.Container;
using org.ncore.ServicedApi.Persistence;

namespace <#=model.Namespace#>.Api.Services
{
<#
	if( !factype.IsKeyed )
	{		
#>	
	[DebuggerDisplay("<#=factype.MonikerName#> = {<#=factype.MonikerName#>}")]
<#
	}
	else
	{
#>
	[DebuggerDisplay("<#=factype.KeyProperty.Name#> = {<#=factype.KeyProperty.Name#>}")]
<#
	}
#>
    public partial class <#=factype.Name#> : <#=baseType#>
    {
        private <#=factype.Name#>(<#=constructorParams#>)
            : base(<#=baseConstructorParams#>)
        {
<#
	foreach( FactypeAttributeModel property in factype.Attributes.Values )
	{
		if( !property.IsKey )
		{
#>
			this.<#=property.Name#> = <#=property.Name.ToInternalName()#>;
<#
		}
	}
#>
		}

        public static implicit operator <#=factype.Name#>( string <#=factype.MonikerName.ToInternalName()#> )
        {
            return <#=factype.Name#>.Parse< <#=factype.Name#> >( <#=factype.MonikerName.ToInternalName()#> );
        }

        public static List< <#=factype.Name#> > GetAll()
        {
            return <#=factype.Name#>.GetAll< <#=factype.Name#> >();
        }

        public static string[] GetMonikers()
        {
            return <#=factype.Name#>.GetMonikers< <#=factype.Name#> >();
        }

<#
	if( factype.IsKeyed )
	{		
#>	
        public static <#=factype.Name#> Parse( <#=factype.KeyProperty.Type#> <#=factype.KeyProperty.Name.ToInternalName()#> )
        {
            return KeyedFactype< <#=factype.KeyProperty.Type#> >.Parse< <#=factype.Name#> >( <#=factype.KeyProperty.Name.ToInternalName()#> );
        }
		
        public static implicit operator <#=factype.Name#>( <#=factype.KeyProperty.Type#> <#=factype.KeyProperty.Name.ToInternalName()#> )
        {
            return <#=factype.Name#>.Parse< <#=factype.Name#> >( <#=factype.KeyProperty.Name.ToInternalName()#> );
        }

        public static bool CanParse( <#=factype.KeyProperty.Type#> <#=factype.KeyProperty.Name.ToInternalName()#> )
        {
            return KeyedFactype< <#=factype.KeyProperty.Type#> >.CanParse< <#=factype.Name#> >( <#=factype.KeyProperty.Name.ToInternalName()#> );
        }
<#
	}
#>
		#region Properties
<#
	foreach( FactypeAttributeModel property in factype.Attributes.Values )
	{
#>
		public <#=property.Type#> <#=property.Name#>{ get; protected set; }
<#
	}

	foreach( ParentReferencePropertyModel property in factype.ParentReferences.Values )
	{
		if( model.Factypes.ContainsKey( property.ParentType ) )
		{
#>
        public <#=property.ParentType#> <#=property.Name#>
        {
            get
            {
                return (<#=property.ParentType#>)this.<#=property.ChildKey#>;
            }
        }

<#
		}
	}
		foreach( ChildReferencePropertyModel property in factype.ChildReferences.Values )
	{
		if( model.Factypes.ContainsKey( property.ChildType ) )
		{
#>
        public List< <#=property.ChildType#> > <#=property.Name#>
        {
            get
            {
                return <#=property.ChildType#>.GetAll().Where( item => item.<#=property.ChildKey#> == this ).ToList();
            }
        }

<#
		}
	}
#>

		#endregion Properties
    }
}