<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="org.ncore.Common" #>
<#
ServicedApiModel model = ( (org.ncore.ServicedApi.CodeGenerator.T4Templating.TemplatingHost)Host ).Model;	
string serviceName = Host.ResolveParameterValue( null, null, "TargetObjectName" );
ServiceModel service = model.Services[ serviceName ];
#>
<#@ include file="Header.generated.cs.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using org.ncore.ServicedApi.Persistence;
using <#=model.Namespace#>.Api.Services;

namespace <#=model.Namespace#>.Api.Silos
{
    public partial interface I<#=service.Name#>Silo : IDataSilo
    {
<#	
	if( service.CreateOperation != null )
	{	
#>
        void Create( <#=service.Name#> instance );
<#
	}
	
	if( service.ReadOperation != null )
	{
#>
        <#=service.Name#> Read( <#=service.IdentifierProperty.Type#> <#=service.IdentifierProperty.Name.ToInternalName()#> );
<#
	}
	
	if( service.UpdateOperation != null )
	{
#>
        void Update( <#=service.Name#> instance );
<#
	}
	
	if( service.DeleteOperation != null )
	{
#>
		void Delete( <#=service.IdentifierProperty.Type#> <#=service.IdentifierProperty.Name.ToInternalName()#> );
<#
	}
	
	foreach( ReadByParentOperationModel operation in service.ReadByParentOperations.Values )
	{
#>
		List< <#=service.Name#> > <#=operation.Name#>( <#=operation.KeyType#> <#=operation.ParentKey.ToInternalName()#> );
<#
	}
#>
    }
}
