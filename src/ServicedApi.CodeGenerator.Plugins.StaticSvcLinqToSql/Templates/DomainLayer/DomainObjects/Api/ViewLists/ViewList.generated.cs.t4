<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="org.ncore.Common" #>
<#
ServicedApiModel model = ( (org.ncore.ServicedApi.CodeGenerator.T4Templating.TemplatingHost)Host ).Model;
string viewListName = Host.ResolveParameterValue( null, null, "TargetObjectName" );
ViewListModel viewList = model.ViewLists[ viewListName ];
#>
<#@ include file="Header.generated.cs.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Mkx.Programs.Tmi.Api.Utility;
using org.ncore.Common;
using org.ncore.ServicedApi.Persistence;

namespace <#=model.Namespace#>.Api.Services
{
    public partial class <#=viewList.Name#> : ViewList< <#=viewList.Name#>.Item >
    {
        public <#=viewList.Name#>( IEnumerable<Object> query )
        {
            foreach( Object record in query )
            {
			    // TODO: Pre and post hooks?  JF
                this.Add( new <#=viewList.Name#>.Item( record ) );
            }
        }

        // TODO: Does it make sense to add support for IQueryable as well?  JF
        //public CaseHeaderViewList(IQueryable query)
        //{
        //    foreach (var record in query)
        //    {
        //        this.Add(new Item(record));
        //    }
        //}
		
        public class Item : ViewListItem
        {
<#
	foreach( ViewListAttributeModel property in viewList.Attributes.Values )
	{
#>
            public <#=property.Type#> <#=property.Name#> { get; set; }
<#
	}
#>		

            public Item( Object record )
            {
			    // TODO: Pre and post hooks.  JF
                MemberMapper.Map( record, this, MemberMapper.MemberTypeEnum.Property, true );

                // TODO: Could use dynamic instead to "hard-code" mapping.  JF
            }
        }
    }
}
