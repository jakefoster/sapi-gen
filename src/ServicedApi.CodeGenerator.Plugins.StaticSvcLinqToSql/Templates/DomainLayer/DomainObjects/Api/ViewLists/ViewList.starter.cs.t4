<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api" #>
<#@ import namespace="org.ncore.ServicedApi.CodeGenerator.Api.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="org.ncore.Common" #>
<#
ServicedApiModel model = ( (org.ncore.ServicedApi.CodeGenerator.T4Templating.TemplatingHost)Host ).Model;
string viewListName = Host.ResolveParameterValue( null, null, "TargetObjectName" );
ViewListModel viewList = model.ViewLists[ viewListName ];
#>
<#@ include file="Header.starter.cs.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using org.ncore.ServicedApi;
using org.ncore.ServicedApi.Persistence;

using <#=model.Namespace#>.Api.Silos;
using <#=model.Namespace#>.Api.Utility;

namespace <#=model.Namespace#>.Api.Services
{
    public partial class <#=viewList.Name#> : ViewList< <#=viewList.Name#>.Item >
    {
	    // TODO: Implement static public and internal "list-reader" pairs.
		// Example:
		/*
        public static <#=viewList.Name#> ReadLast( int count )
        {
            using( ServiceContext.Current = new ServiceContext( New.Instance<IDataContext>() ) )
            {
                return <#=viewList.Name#>.readLast( count );
            }
        }


        internal static <#=viewList.Name#> readLast( int count )
        {
            using( TransactionScope scope = ServiceContext.Current.DataContext.GetScope() )
            {
                I<#=viewList.Name#>Silo silo = (I<#=viewList.Name#>Silo)ServiceContext.Current.DataContext.GetSilo<I<#=viewList.Name#>Silo>();
                <#=viewList.Name#> instance = silo.ReadLast( count );
                scope.Complete();
                return instance;
            }
        }
		*/
    }
}
